{"version":3,"sources":["webpack://naver-design-gatsby/./src/components/mobileNavBar/navMenu.js"],"names":["NavMenuContainer","NavList","NavLink","motion","NavListDepth","NavLinkDepth","MobileLNBWrapper","MobileNavBarMainLinkActive","MobileLNBul","MobileLNBliPartName","variants","transform","opacity","Divider","props","NavMenu","currGNB","location","toggle","isOpen","data","useStaticQuery","allMdx","site","siteMetadata","naverOSS","gnbMenu","config","pathname","slice","split","filteredMenu","edges","filter","el","node","fields","slug","gnbMenuParts","folderName","part","finalLNB","forEach","i","frontmatter","push","item","calculatedLNBobject","Object","keys","key","tree","tmp","includes","reduce","accu","title","order","parts","prevItems","items","find","label","depthLength","length","existingItem","url","reverse","map","sort","a","b","slicedLength","index","findIndex","unshift","splice","defaultCollapsed","useState","collapsed","setCollapsed","toggleMenu","partLength","menu","text","initial","animate","show","transition","delay","duration","hide","to","activeClassName","onClick","dangerouslySetInnerHTML","__html","className"],"mappings":"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","file":"19c76b04-2ced9b0a248f994a26cd.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { useStaticQuery, graphql } from 'gatsby';\r\nimport styled from '@emotion/styled';\r\nimport config from '../../../config';\r\nimport Link from '../link';\r\nimport TreeNode from './treeNode';\r\n\r\nconst NavMenuContainer = styled.div`\r\n  width: 100%;\r\n`;\r\n\r\nconst NavList = styled.ul`\r\n  display: inline-block;\r\n\r\n  &:hover {\r\n    li a {\r\n      color: #636363;\r\n    }\r\n    li a.active {\r\n      color: #131313 !important;\r\n    }\r\n  }\r\n`;\r\n\r\nconst NavLink = styled(motion.li)`\r\n  height: 34px;\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  margin-bottom: 18px;\r\n\r\n  a {\r\n    text-decoration: none;\r\n    font-family: 'SF Pro Display';\r\n    font-weight: 600;\r\n    font-size: 26px;\r\n    line-height: 130%;\r\n    letter-spacing: -0.006em;\r\n    color: #131313;\r\n    transition: all 200ms ease-in-out;\r\n  }\r\n\r\n  a:hover {\r\n    color: #131313 !important;\r\n  }\r\n`;\r\n\r\nconst NavListDepth = styled.ul`\r\n  display: inline-block;\r\n`;\r\n\r\nconst NavLinkDepth = styled(motion.li)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  cursor: pointer;\r\n  margin-bottom: 18px;\r\n\r\n  a {\r\n    text-decoration: none;\r\n    font-family: 'SF Pro Display';\r\n    font-weight: 600;\r\n    font-size: 26px;\r\n    line-height: 130%;\r\n    letter-spacing: -0.006em;\r\n    color: #919191;\r\n    transition: all 200ms ease-in-out;\r\n  }\r\n\r\n  a:hover {\r\n    color: #131313 !important;\r\n  }\r\n`;\r\n\r\nconst MobileLNBWrapper = styled.div``;\r\n\r\nconst MobileNavBarMainLinkActive = styled.div`\r\n  color: #131313;\r\n`;\r\n\r\nconst MobileLNBul = styled.ul`\r\n  li {\r\n    list-style-type: none;\r\n    width: auto;\r\n    list-style: none;\r\n  }\r\n\r\n  li a {\r\n    color: #636363;\r\n    font-family: 'SF Pro Text';\r\n    font-weight: 400;\r\n    font-size: 16px;\r\n    line-height: 130%;\r\n    letter-spacing: -0.022em;\r\n    text-decoration: none;\r\n    display: flex;\r\n    align-items: center;\r\n    height: 44px;\r\n    white-space: nowrap;\r\n    padding-right: 1300px;\r\n    position: relative;\r\n  }\r\n\r\n  li a::after {\r\n    content: '';\r\n    z-index: -1;\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: -30%;\r\n    right: 0;\r\n  }\r\n\r\n  li a:hover {\r\n    /* background-color: #fafafa; */\r\n    color: #424242 !important;\r\n  }\r\n\r\n  li a:hover::after {\r\n    background-color: #fafafa;\r\n  }\r\n\r\n  .firstlevel > ul > .item {\r\n    margin-left: 0 !important;\r\n  }\r\n\r\n  .item .item {\r\n    margin-left: 20px;\r\n  }\r\n\r\n  li .active a {\r\n    font-weight: 600;\r\n    color: #424242 !important;\r\n  }\r\n`;\r\n\r\nconst MobileLNBliPartName = styled(motion.li)`\r\n  list-style-type: none;\r\n  width: auto;\r\n  list-style: none;\r\n  font-family: 'SF Pro Text';\r\n  font-weight: 600;\r\n  font-size: 18px;\r\n  line-height: 130%;\r\n  letter-spacing: -0.022em;\r\n  color: #131313;\r\n  cursor: default;\r\n  margin-top: 20px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst variants = {\r\n  show: {\r\n    transform: 'translateX(0em)',\r\n    opacity: 1,\r\n  },\r\n  hide: {\r\n    transform: 'translateX(5em)',\r\n    opacity: 0,\r\n  },\r\n};\r\n\r\nconst calculateTreeData = (edges) => {\r\n  const withoutServicePage = config.lnb.ignoreIndex\r\n    ? edges.filter(\r\n        ({\r\n          node: {\r\n            fields: { slug },\r\n          },\r\n          // }) => slug !== '/'\r\n        }) => !slug.includes('index') && !slug.includes('whatsNewChanges')\r\n      )\r\n    : edges;\r\n\r\n  // withoutServicePage 배열의 current value를 돌고, 결과를 accu에 return함\r\n  const tree = withoutServicePage.reduce(\r\n    (\r\n      accu, // accumulator\r\n      {\r\n        node: {\r\n          // current value\r\n          fields: { slug, title },\r\n          frontmatter: { order },\r\n        },\r\n      }\r\n    ) => {\r\n      const parts = slug.split('/'); // depth별로 나눔 /about/1/2.md면 about,1,2\r\n\r\n      let { items: prevItems } = accu; // let prevItems = accu.items\r\n\r\n      const slicedParts = parts.slice(2, -1); // md가 1 depth(ex. /content/ux-writing/~~.md)에 위치하면 값이 없음\r\n\r\n      for (const part of slicedParts) {\r\n        // depth 2 이상에(ex. /content/ux-writing/aboutux/~~.md) 위치한 md일때\r\n        let tmp = prevItems && prevItems.find(({ label }) => label == part); // 폴더와 같은 이름의 md파일을 찾음\r\n        if (tmp) {\r\n          // 같은 이름의 md가 있다면\r\n          if (!tmp.items) {\r\n            tmp.items = [];\r\n          }\r\n        } else {\r\n          // 같은 이름의 md가 없다면\r\n          tmp = { label: part, items: [] };\r\n          prevItems.push(tmp);\r\n        }\r\n        prevItems = tmp.items;\r\n      }\r\n      const depthLength = parts.length - 2; // 1 depth면 1\r\n      const existingItem = prevItems.find(({ label }) => label === parts[depthLength + 1]); // 이미 중복 존재하는 md인지 확인\r\n\r\n      if (existingItem) {\r\n        existingItem.url = slug;\r\n        existingItem.title = title;\r\n        existingItem.order = order;\r\n      } else {\r\n        prevItems.push({\r\n          label: parts[depthLength + 1],\r\n          url: slug,\r\n          items: [],\r\n          title,\r\n          order,\r\n        });\r\n      }\r\n      return accu;\r\n    },\r\n    { items: [] } // initial value\r\n  );\r\n\r\n  const tmp = [];\r\n\r\n  tmp.reverse();\r\n\r\n  return tmp.reduce((accu, slug) => {\r\n    const parts = slug.split('/');\r\n\r\n    let { items: prevItems } = accu;\r\n\r\n    const slicedParts = parts.slice(1, -1);\r\n\r\n    for (const part of slicedParts) {\r\n      let tmp = prevItems.find((item) => item && item.label == part);\r\n\r\n      if (tmp) {\r\n        if (!tmp.items) {\r\n          tmp.items = [];\r\n        }\r\n      } else {\r\n        tmp = { label: part, items: [] };\r\n        prevItems.push(tmp);\r\n      }\r\n      if (tmp && tmp.items) {\r\n        prevItems = tmp.items;\r\n      }\r\n    }\r\n\r\n    // 기본은 alphabet order\r\n    prevItems.map((item) => {\r\n      item.items = item.items.sort(function (a, b) {\r\n        if (a.label < b.label) return -1;\r\n        if (a.label > b.label) return 1;\r\n        return 0;\r\n      });\r\n    });\r\n\r\n    const slicedLength = parts.length - 1;\r\n\r\n    const index = prevItems.findIndex(({ label }) => label === parts[slicedLength]);\r\n\r\n    if (prevItems.length) {\r\n      accu.items.unshift(prevItems.splice(index, 1)[0]);\r\n    }\r\n    return accu;\r\n  }, tree);\r\n};\r\n\r\nconst Divider = styled((props) => (\r\n  <li {...props}>\r\n    <hr />\r\n  </li>\r\n))`\r\n  list-style: none;\r\n  padding: 0;\r\n  position: relative;\r\n  margin-top: 20px;\r\n  padding-right: 1300px;\r\n\r\n  &::after {\r\n    content: '';\r\n    z-index: -1;\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: -30%;\r\n    right: 0;\r\n    border-bottom: solid 1px #e2e2e2;\r\n  }\r\n\r\n  hr {\r\n    margin: 0;\r\n    padding: 0;\r\n    border: 0;\r\n    border-bottom: 1px solid #e2e2e2;\r\n  }\r\n`;\r\n\r\nexport function NavMenu({ location, toggle, isOpen }) {\r\n  const data = useStaticQuery(graphql`\r\n    query navMenuQuery {\r\n      allMdx {\r\n        edges {\r\n          node {\r\n            fields {\r\n              slug\r\n              title\r\n            }\r\n            frontmatter {\r\n              part\r\n              order\r\n            }\r\n          }\r\n        }\r\n      }\r\n      site {\r\n        siteMetadata {\r\n          naverOSS\r\n          gnbMenu {\r\n            text\r\n            folderName\r\n            part\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const {\r\n    allMdx,\r\n    site: {\r\n      siteMetadata: { naverOSS, gnbMenu },\r\n    },\r\n  } = data; // graphQL로 데이터 가져옴\r\n\r\n  let currGNB;\r\n\r\n  if (naverOSS) {\r\n    currGNB =\r\n      config.gatsby.pathPrefix !== '/'\r\n        ? location.pathname.slice(1).split('/')[2]\r\n        : location.pathname.slice(1).split('/')[0];\r\n  } else {\r\n    currGNB =\r\n      config.gatsby.pathPrefix !== '/'\r\n        ? location.pathname.slice(1).split('/')[1]\r\n        : location.pathname.slice(1).split('/')[0];\r\n  }\r\n\r\n  // 전체 markdown 중에서 현재 GNB에 맞는 것만 필터\r\n\r\n  let filteredMenu = allMdx.edges.filter(function (el) {\r\n    return el.node.fields.slug.slice(1).split('/')[0] === currGNB;\r\n  });\r\n\r\n  if (currGNB) {\r\n    let tempGnbMenu = gnbMenu.filter((el) => {\r\n      return el.folderName === currGNB;\r\n    });\r\n\r\n    // 여기부분 path prefix 다시 봐보기\r\n    let gnbMenuParts = tempGnbMenu[0].part;\r\n\r\n    // 현재 GNB에 맞게 필터된 markdown 중에서 카테고리 순으로 나누기\r\n    let finalLNB = {};\r\n    finalLNB['etc'] = [];\r\n    filteredMenu.forEach((i) => {\r\n      if (!i.node.frontmatter.part) {\r\n        finalLNB['etc'].push(i);\r\n      }\r\n    });\r\n    gnbMenuParts.forEach((item) => {\r\n      finalLNB[item] = [];\r\n      filteredMenu.forEach((i) => {\r\n        if (item === i.node.frontmatter.part) {\r\n          finalLNB[item].push(i);\r\n        }\r\n      });\r\n    });\r\n\r\n    let calculatedLNBobject = {}; // tree구조가 됨\r\n    Object.keys(finalLNB).forEach((key) => {\r\n      if (key !== '') {\r\n        // console.log('calculate됨!',' + ', key, ' + ', LNBobject[key])\r\n        calculatedLNBobject[key] = calculateTreeData(finalLNB[key]);\r\n      }\r\n    });\r\n\r\n    Object.keys(calculatedLNBobject).forEach((key) => {\r\n      if (key !== '') {\r\n        // depth-1 sort\r\n        if (calculatedLNBobject[key].items.length > 1) {\r\n          calculatedLNBobject[key].items.sort((a, b) => {\r\n            return a.order - b.order;\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    Object.keys(calculatedLNBobject).forEach((key) => {\r\n      if (key !== '') {\r\n        // depth-2 sort\r\n        if (calculatedLNBobject[key].items.length > 0) {\r\n          calculatedLNBobject[key].items.forEach((el) => {\r\n            el.items.sort((a, b) => {\r\n              return a.order - b.order;\r\n            });\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    const defaultCollapsed = {};\r\n\r\n    Object.keys(calculatedLNBobject).forEach((key) => {\r\n      if (key !== '' && key !== 'etc') {\r\n        calculatedLNBobject[key].items.forEach((item) => {\r\n          defaultCollapsed[item.url] = true; // 닫혀있음\r\n        });\r\n      }\r\n    });\r\n\r\n    const [collapsed, setCollapsed] = useState(defaultCollapsed);\r\n    // setCollapsed(defaultCollapsed)\r\n    const toggleMenu = (url) => {\r\n      setCollapsed({\r\n        ...collapsed,\r\n        [url]: !collapsed[url],\r\n      });\r\n    };\r\n\r\n    let partLength = Object.keys(calculatedLNBobject).length - 1;\r\n\r\n    return (\r\n      <NavMenuContainer>\r\n        <NavListDepth>\r\n          {gnbMenu.map((menu, key) => {\r\n            if (menu.text !== '' && menu.folderName !== '') {\r\n              if (currGNB === menu.folderName) {\r\n                return (\r\n                  <NavLinkDepth\r\n                    key={key}\r\n                    initial={false}\r\n                    animate={isOpen ? 'show' : 'hide'}\r\n                    variants={{\r\n                      show: {\r\n                        ...variants.show,\r\n                        transition: { delay: 0.2, duration: 0.5 },\r\n                      },\r\n                      hide: {\r\n                        ...variants.hide,\r\n                        transition: { delay: 0.05, duration: 0.05 },\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Link\r\n                      to={`/${menu.folderName}/index`}\r\n                      activeClassName=\"active\"\r\n                      onClick={toggle}\r\n                    >\r\n                      <MobileNavBarMainLinkActive dangerouslySetInnerHTML={{ __html: menu.text }} />\r\n                    </Link>\r\n                    <MobileLNBWrapper>\r\n                      {Object.keys(calculatedLNBobject).map((key, index) => {\r\n                        return key === 'etc' ? (\r\n                          <MobileLNBul key={key}>\r\n                            <TreeNode\r\n                              className={'MobileLNBli firstlevel'}\r\n                              setCollapsed={toggleMenu}\r\n                              collapsed={collapsed}\r\n                              {...calculatedLNBobject[key]}\r\n                            />\r\n                          </MobileLNBul>\r\n                        ) : (\r\n                          <MobileLNBul key={key}>\r\n                            <MobileLNBliPartName\r\n                              // className={} // mobile서 나중에 보이도록\r\n                              dangerouslySetInnerHTML={{ __html: key }}\r\n                            />\r\n                            <TreeNode\r\n                              className={'MobileLNBli firstlevel'}\r\n                              setCollapsed={toggleMenu}\r\n                              collapsed={collapsed}\r\n                              toggle={toggle}\r\n                              {...calculatedLNBobject[key]}\r\n                            />\r\n                            {index === partLength ? null : <Divider />}\r\n                          </MobileLNBul>\r\n                        );\r\n                      })}\r\n                    </MobileLNBWrapper>\r\n                  </NavLinkDepth>\r\n                );\r\n              }\r\n              return (\r\n                <NavLinkDepth\r\n                  key={key}\r\n                  initial={false}\r\n                  animate={isOpen ? 'show' : 'hide'}\r\n                  onClick={toggle}\r\n                  variants={{\r\n                    show: {\r\n                      ...variants.show,\r\n                      transition: { delay: 0.2, duration: 0.5 },\r\n                    },\r\n                    hide: {\r\n                      ...variants.hide,\r\n                      transition: { delay: 0.05, duration: 0.05 },\r\n                    },\r\n                  }}\r\n                >\r\n                  <Link to={`/${menu.folderName}/index`} activeClassName=\"active\">\r\n                    <div\r\n                      className={'mobileNavBarMainLink'}\r\n                      dangerouslySetInnerHTML={{ __html: menu.text }}\r\n                    />\r\n                  </Link>\r\n                </NavLinkDepth>\r\n              );\r\n            }\r\n          })}\r\n        </NavListDepth>\r\n      </NavMenuContainer>\r\n    );\r\n  } else {\r\n    // 메인 페이지\r\n    return (\r\n      <NavMenuContainer>\r\n        <NavList>\r\n          {gnbMenu.map((menu, key) => {\r\n            if (menu.text !== '' && menu.folderName !== '') {\r\n              return (\r\n                <NavLink\r\n                  key={key}\r\n                  initial={false}\r\n                  animate={isOpen ? 'show' : 'hide'}\r\n                  onClick={toggle}\r\n                  variants={{\r\n                    show: {\r\n                      ...variants.show,\r\n                      transition: { delay: 0.2, duration: 0.5 },\r\n                    },\r\n                    hide: {\r\n                      ...variants.hide,\r\n                      transition: { delay: 0.05, duration: 0.05 },\r\n                    },\r\n                  }}\r\n                >\r\n                  <Link to={`/${menu.folderName}/index`} activeClassName=\"active\">\r\n                    <div\r\n                      className={'mobileNavBarMainLink'}\r\n                      dangerouslySetInnerHTML={{ __html: menu.text }}\r\n                    />\r\n                  </Link>\r\n                </NavLink>\r\n              );\r\n            }\r\n          })}\r\n        </NavList>\r\n      </NavMenuContainer>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}